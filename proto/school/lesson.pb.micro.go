// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/school/lesson.proto

package omo_msp_school

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LessonService service

type LessonService interface {
	AddOne(ctx context.Context, in *ReqLessonAdd, opts ...client.CallOption) (*ReplyLessonInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyLessonInfo, error)
	GetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyLessonList, error)
	SetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyLessonInfo, error)
	GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateOne(ctx context.Context, in *ReqLessonUpdate, opts ...client.CallOption) (*ReplyLessonInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type lessonService struct {
	c    client.Client
	name string
}

func NewLessonService(name string, c client.Client) LessonService {
	return &lessonService{
		c:    c,
		name: name,
	}
}

func (c *lessonService) AddOne(ctx context.Context, in *ReqLessonAdd, opts ...client.CallOption) (*ReplyLessonInfo, error) {
	req := c.c.NewRequest(c.name, "LessonService.AddOne", in)
	out := new(ReplyLessonInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyLessonInfo, error) {
	req := c.c.NewRequest(c.name, "LessonService.GetOne", in)
	out := new(ReplyLessonInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonService) GetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyLessonList, error) {
	req := c.c.NewRequest(c.name, "LessonService.GetByFilter", in)
	out := new(ReplyLessonList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonService) SetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyLessonInfo, error) {
	req := c.c.NewRequest(c.name, "LessonService.SetByFilter", in)
	out := new(ReplyLessonInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonService) GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "LessonService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonService) UpdateOne(ctx context.Context, in *ReqLessonUpdate, opts ...client.CallOption) (*ReplyLessonInfo, error) {
	req := c.c.NewRequest(c.name, "LessonService.UpdateOne", in)
	out := new(ReplyLessonInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "LessonService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LessonService service

type LessonServiceHandler interface {
	AddOne(context.Context, *ReqLessonAdd, *ReplyLessonInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyLessonInfo) error
	GetByFilter(context.Context, *RequestPage, *ReplyLessonList) error
	SetByFilter(context.Context, *RequestPage, *ReplyLessonInfo) error
	GetStatistic(context.Context, *RequestPage, *ReplyStatistic) error
	UpdateOne(context.Context, *ReqLessonUpdate, *ReplyLessonInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterLessonServiceHandler(s server.Server, hdlr LessonServiceHandler, opts ...server.HandlerOption) error {
	type lessonService interface {
		AddOne(ctx context.Context, in *ReqLessonAdd, out *ReplyLessonInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyLessonInfo) error
		GetByFilter(ctx context.Context, in *RequestPage, out *ReplyLessonList) error
		SetByFilter(ctx context.Context, in *RequestPage, out *ReplyLessonInfo) error
		GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error
		UpdateOne(ctx context.Context, in *ReqLessonUpdate, out *ReplyLessonInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type LessonService struct {
		lessonService
	}
	h := &lessonServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LessonService{h}, opts...))
}

type lessonServiceHandler struct {
	LessonServiceHandler
}

func (h *lessonServiceHandler) AddOne(ctx context.Context, in *ReqLessonAdd, out *ReplyLessonInfo) error {
	return h.LessonServiceHandler.AddOne(ctx, in, out)
}

func (h *lessonServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyLessonInfo) error {
	return h.LessonServiceHandler.GetOne(ctx, in, out)
}

func (h *lessonServiceHandler) GetByFilter(ctx context.Context, in *RequestPage, out *ReplyLessonList) error {
	return h.LessonServiceHandler.GetByFilter(ctx, in, out)
}

func (h *lessonServiceHandler) SetByFilter(ctx context.Context, in *RequestPage, out *ReplyLessonInfo) error {
	return h.LessonServiceHandler.SetByFilter(ctx, in, out)
}

func (h *lessonServiceHandler) GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error {
	return h.LessonServiceHandler.GetStatistic(ctx, in, out)
}

func (h *lessonServiceHandler) UpdateOne(ctx context.Context, in *ReqLessonUpdate, out *ReplyLessonInfo) error {
	return h.LessonServiceHandler.UpdateOne(ctx, in, out)
}

func (h *lessonServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.LessonServiceHandler.RemoveOne(ctx, in, out)
}
