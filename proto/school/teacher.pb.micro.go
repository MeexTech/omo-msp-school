// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/school/teacher.proto

package omo_msp_school

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TeacherService service

type TeacherService interface {
	AddOne(ctx context.Context, in *ReqTeacherAdd, opts ...client.CallOption) (*ReplyTeacherInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyTeacherInfo, error)
	GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTeacherList, error)
	GetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTeacherList, error)
	UpdateOne(ctx context.Context, in *ReqTeacherUpdate, opts ...client.CallOption) (*ReplyTeacherInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	AddBatch(ctx context.Context, in *ReqTeacherBatch, opts ...client.CallOption) (*ReplyTeacherList, error)
	UpdateTags(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
}

type teacherService struct {
	c    client.Client
	name string
}

func NewTeacherService(name string, c client.Client) TeacherService {
	return &teacherService{
		c:    c,
		name: name,
	}
}

func (c *teacherService) AddOne(ctx context.Context, in *ReqTeacherAdd, opts ...client.CallOption) (*ReplyTeacherInfo, error) {
	req := c.c.NewRequest(c.name, "TeacherService.AddOne", in)
	out := new(ReplyTeacherInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyTeacherInfo, error) {
	req := c.c.NewRequest(c.name, "TeacherService.GetOne", in)
	out := new(ReplyTeacherInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTeacherList, error) {
	req := c.c.NewRequest(c.name, "TeacherService.GetList", in)
	out := new(ReplyTeacherList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) GetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTeacherList, error) {
	req := c.c.NewRequest(c.name, "TeacherService.GetByFilter", in)
	out := new(ReplyTeacherList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) UpdateOne(ctx context.Context, in *ReqTeacherUpdate, opts ...client.CallOption) (*ReplyTeacherInfo, error) {
	req := c.c.NewRequest(c.name, "TeacherService.UpdateOne", in)
	out := new(ReplyTeacherInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "TeacherService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) AddBatch(ctx context.Context, in *ReqTeacherBatch, opts ...client.CallOption) (*ReplyTeacherList, error) {
	req := c.c.NewRequest(c.name, "TeacherService.AddBatch", in)
	out := new(ReplyTeacherList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherService) UpdateTags(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "TeacherService.UpdateTags", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TeacherService service

type TeacherServiceHandler interface {
	AddOne(context.Context, *ReqTeacherAdd, *ReplyTeacherInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyTeacherInfo) error
	GetList(context.Context, *RequestPage, *ReplyTeacherList) error
	GetByFilter(context.Context, *RequestPage, *ReplyTeacherList) error
	UpdateOne(context.Context, *ReqTeacherUpdate, *ReplyTeacherInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	AddBatch(context.Context, *ReqTeacherBatch, *ReplyTeacherList) error
	UpdateTags(context.Context, *RequestList, *ReplyList) error
}

func RegisterTeacherServiceHandler(s server.Server, hdlr TeacherServiceHandler, opts ...server.HandlerOption) error {
	type teacherService interface {
		AddOne(ctx context.Context, in *ReqTeacherAdd, out *ReplyTeacherInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyTeacherInfo) error
		GetList(ctx context.Context, in *RequestPage, out *ReplyTeacherList) error
		GetByFilter(ctx context.Context, in *RequestPage, out *ReplyTeacherList) error
		UpdateOne(ctx context.Context, in *ReqTeacherUpdate, out *ReplyTeacherInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		AddBatch(ctx context.Context, in *ReqTeacherBatch, out *ReplyTeacherList) error
		UpdateTags(ctx context.Context, in *RequestList, out *ReplyList) error
	}
	type TeacherService struct {
		teacherService
	}
	h := &teacherServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TeacherService{h}, opts...))
}

type teacherServiceHandler struct {
	TeacherServiceHandler
}

func (h *teacherServiceHandler) AddOne(ctx context.Context, in *ReqTeacherAdd, out *ReplyTeacherInfo) error {
	return h.TeacherServiceHandler.AddOne(ctx, in, out)
}

func (h *teacherServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyTeacherInfo) error {
	return h.TeacherServiceHandler.GetOne(ctx, in, out)
}

func (h *teacherServiceHandler) GetList(ctx context.Context, in *RequestPage, out *ReplyTeacherList) error {
	return h.TeacherServiceHandler.GetList(ctx, in, out)
}

func (h *teacherServiceHandler) GetByFilter(ctx context.Context, in *RequestPage, out *ReplyTeacherList) error {
	return h.TeacherServiceHandler.GetByFilter(ctx, in, out)
}

func (h *teacherServiceHandler) UpdateOne(ctx context.Context, in *ReqTeacherUpdate, out *ReplyTeacherInfo) error {
	return h.TeacherServiceHandler.UpdateOne(ctx, in, out)
}

func (h *teacherServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.TeacherServiceHandler.RemoveOne(ctx, in, out)
}

func (h *teacherServiceHandler) AddBatch(ctx context.Context, in *ReqTeacherBatch, out *ReplyTeacherList) error {
	return h.TeacherServiceHandler.AddBatch(ctx, in, out)
}

func (h *teacherServiceHandler) UpdateTags(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.TeacherServiceHandler.UpdateTags(ctx, in, out)
}
