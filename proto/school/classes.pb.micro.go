// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/school/classes.proto

package omo_msp_school

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ClassesService service

type ClassesService interface {
	AddOne(ctx context.Context, in *ReqClassAdd, opts ...client.CallOption) (*ReplyClassInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyClassList, error)
	GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyClassList, error)
	UpdateOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyClassInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	SetMaster(ctx context.Context, in *ReqClassMaster, opts ...client.CallOption) (*ReplyInfo, error)
	StudentJoin(ctx context.Context, in *ReqClassJoin, opts ...client.CallOption) (*ReplyInfo, error)
	StudentKick(ctx context.Context, in *ReqClassKick, opts ...client.CallOption) (*ReplyInfo, error)
}

type classesService struct {
	c    client.Client
	name string
}

func NewClassesService(name string, c client.Client) ClassesService {
	return &classesService{
		c:    c,
		name: name,
	}
}

func (c *classesService) AddOne(ctx context.Context, in *ReqClassAdd, opts ...client.CallOption) (*ReplyClassInfo, error) {
	req := c.c.NewRequest(c.name, "ClassesService.AddOne", in)
	out := new(ReplyClassInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyClassList, error) {
	req := c.c.NewRequest(c.name, "ClassesService.GetOne", in)
	out := new(ReplyClassList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyClassList, error) {
	req := c.c.NewRequest(c.name, "ClassesService.GetList", in)
	out := new(ReplyClassList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) UpdateOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyClassInfo, error) {
	req := c.c.NewRequest(c.name, "ClassesService.UpdateOne", in)
	out := new(ReplyClassInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ClassesService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) SetMaster(ctx context.Context, in *ReqClassMaster, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ClassesService.SetMaster", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) StudentJoin(ctx context.Context, in *ReqClassJoin, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ClassesService.StudentJoin", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesService) StudentKick(ctx context.Context, in *ReqClassKick, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ClassesService.StudentKick", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClassesService service

type ClassesServiceHandler interface {
	AddOne(context.Context, *ReqClassAdd, *ReplyClassInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyClassList) error
	GetList(context.Context, *RequestPage, *ReplyClassList) error
	UpdateOne(context.Context, *RequestInfo, *ReplyClassInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	SetMaster(context.Context, *ReqClassMaster, *ReplyInfo) error
	StudentJoin(context.Context, *ReqClassJoin, *ReplyInfo) error
	StudentKick(context.Context, *ReqClassKick, *ReplyInfo) error
}

func RegisterClassesServiceHandler(s server.Server, hdlr ClassesServiceHandler, opts ...server.HandlerOption) error {
	type classesService interface {
		AddOne(ctx context.Context, in *ReqClassAdd, out *ReplyClassInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyClassList) error
		GetList(ctx context.Context, in *RequestPage, out *ReplyClassList) error
		UpdateOne(ctx context.Context, in *RequestInfo, out *ReplyClassInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		SetMaster(ctx context.Context, in *ReqClassMaster, out *ReplyInfo) error
		StudentJoin(ctx context.Context, in *ReqClassJoin, out *ReplyInfo) error
		StudentKick(ctx context.Context, in *ReqClassKick, out *ReplyInfo) error
	}
	type ClassesService struct {
		classesService
	}
	h := &classesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ClassesService{h}, opts...))
}

type classesServiceHandler struct {
	ClassesServiceHandler
}

func (h *classesServiceHandler) AddOne(ctx context.Context, in *ReqClassAdd, out *ReplyClassInfo) error {
	return h.ClassesServiceHandler.AddOne(ctx, in, out)
}

func (h *classesServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyClassList) error {
	return h.ClassesServiceHandler.GetOne(ctx, in, out)
}

func (h *classesServiceHandler) GetList(ctx context.Context, in *RequestPage, out *ReplyClassList) error {
	return h.ClassesServiceHandler.GetList(ctx, in, out)
}

func (h *classesServiceHandler) UpdateOne(ctx context.Context, in *RequestInfo, out *ReplyClassInfo) error {
	return h.ClassesServiceHandler.UpdateOne(ctx, in, out)
}

func (h *classesServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ClassesServiceHandler.RemoveOne(ctx, in, out)
}

func (h *classesServiceHandler) SetMaster(ctx context.Context, in *ReqClassMaster, out *ReplyInfo) error {
	return h.ClassesServiceHandler.SetMaster(ctx, in, out)
}

func (h *classesServiceHandler) StudentJoin(ctx context.Context, in *ReqClassJoin, out *ReplyInfo) error {
	return h.ClassesServiceHandler.StudentJoin(ctx, in, out)
}

func (h *classesServiceHandler) StudentKick(ctx context.Context, in *ReqClassKick, out *ReplyInfo) error {
	return h.ClassesServiceHandler.StudentKick(ctx, in, out)
}
