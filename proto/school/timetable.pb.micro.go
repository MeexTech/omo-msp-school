// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/school/timetable.proto

package omo_msp_school

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TimetableService service

type TimetableService interface {
	AddOne(ctx context.Context, in *ReqTimetableAdd, opts ...client.CallOption) (*ReplyTimetableInfo, error)
	AddBatch(ctx context.Context, in *ReqTimetableBatch, opts ...client.CallOption) (*ReplyTimetableList, error)
	GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTimetableList, error)
	GetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTimetableList, error)
	GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type timetableService struct {
	c    client.Client
	name string
}

func NewTimetableService(name string, c client.Client) TimetableService {
	return &timetableService{
		c:    c,
		name: name,
	}
}

func (c *timetableService) AddOne(ctx context.Context, in *ReqTimetableAdd, opts ...client.CallOption) (*ReplyTimetableInfo, error) {
	req := c.c.NewRequest(c.name, "TimetableService.AddOne", in)
	out := new(ReplyTimetableInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timetableService) AddBatch(ctx context.Context, in *ReqTimetableBatch, opts ...client.CallOption) (*ReplyTimetableList, error) {
	req := c.c.NewRequest(c.name, "TimetableService.AddBatch", in)
	out := new(ReplyTimetableList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timetableService) GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTimetableList, error) {
	req := c.c.NewRequest(c.name, "TimetableService.GetList", in)
	out := new(ReplyTimetableList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timetableService) GetByFilter(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyTimetableList, error) {
	req := c.c.NewRequest(c.name, "TimetableService.GetByFilter", in)
	out := new(ReplyTimetableList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timetableService) GetStatistic(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "TimetableService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timetableService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "TimetableService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimetableService service

type TimetableServiceHandler interface {
	AddOne(context.Context, *ReqTimetableAdd, *ReplyTimetableInfo) error
	AddBatch(context.Context, *ReqTimetableBatch, *ReplyTimetableList) error
	GetList(context.Context, *RequestPage, *ReplyTimetableList) error
	GetByFilter(context.Context, *RequestPage, *ReplyTimetableList) error
	GetStatistic(context.Context, *RequestPage, *ReplyStatistic) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterTimetableServiceHandler(s server.Server, hdlr TimetableServiceHandler, opts ...server.HandlerOption) error {
	type timetableService interface {
		AddOne(ctx context.Context, in *ReqTimetableAdd, out *ReplyTimetableInfo) error
		AddBatch(ctx context.Context, in *ReqTimetableBatch, out *ReplyTimetableList) error
		GetList(ctx context.Context, in *RequestPage, out *ReplyTimetableList) error
		GetByFilter(ctx context.Context, in *RequestPage, out *ReplyTimetableList) error
		GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type TimetableService struct {
		timetableService
	}
	h := &timetableServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TimetableService{h}, opts...))
}

type timetableServiceHandler struct {
	TimetableServiceHandler
}

func (h *timetableServiceHandler) AddOne(ctx context.Context, in *ReqTimetableAdd, out *ReplyTimetableInfo) error {
	return h.TimetableServiceHandler.AddOne(ctx, in, out)
}

func (h *timetableServiceHandler) AddBatch(ctx context.Context, in *ReqTimetableBatch, out *ReplyTimetableList) error {
	return h.TimetableServiceHandler.AddBatch(ctx, in, out)
}

func (h *timetableServiceHandler) GetList(ctx context.Context, in *RequestPage, out *ReplyTimetableList) error {
	return h.TimetableServiceHandler.GetList(ctx, in, out)
}

func (h *timetableServiceHandler) GetByFilter(ctx context.Context, in *RequestPage, out *ReplyTimetableList) error {
	return h.TimetableServiceHandler.GetByFilter(ctx, in, out)
}

func (h *timetableServiceHandler) GetStatistic(ctx context.Context, in *RequestPage, out *ReplyStatistic) error {
	return h.TimetableServiceHandler.GetStatistic(ctx, in, out)
}

func (h *timetableServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.TimetableServiceHandler.RemoveOne(ctx, in, out)
}
